#include <locale.h>
#include <iostream>
#include <cmath>

using namespace std;

struct Right_M {
    double len;
    int kolstr;
    double x;
    double y;
    double S;
    double P;
};

Right_M* AddStruct(Right_M* Obj, const int amount);
void setData(Right_M* Obj, const int amount);
void showData(const Right_M* Obj, const int amount, int r);
double computeArea(const Right_M& obj);
double computePerimeter(const Right_M& obj);
void Delete(Right_M* Obj, const int amount, int r);
void restoreCoordinates(const Right_M& obj);
void findMaxArea(const Right_M* Obj, const int amount, int r);
void findMaxPerimeter(const Right_M* Obj, const int amount, int r);

int main()
{
    setlocale(LC_ALL, "Russian");

    Right_M* Geometry = nullptr;
    int M_amount = 0;
    int YeaOrNot = 0;

    do
    {
        Geometry = AddStruct(Geometry, M_amount);
        setData(Geometry, M_amount);

        M_amount++;

        cout << "Продолжить ввод данных? (1 - да, 0 - нет): ";
        cin >> YeaOrNot;
        cin.ignore();
    } while (YeaOrNot != 0);
    int r = 0;
    showData(Geometry, M_amount, r);
    int j=0;
    while (j=1)
    {
        cout << "Хотите удалить структуру? " << endl;
        int g;
        cin >> g;
        if (g==1){
            Delete(Geometry, M_amount, r);
            r++;
        }
        else if(g==0)
        {
            break;
        }
    }
    showData(Geometry, M_amount, r);
    findMaxArea(Geometry, M_amount, r);
    findMaxPerimeter(Geometry, M_amount, r);

    delete[] Geometry;
    return 0;
}

Right_M* AddStruct(Right_M* Obj, const int amount)
{
    Right_M* tempObj = new Right_M[amount + 1];

    for (int i = 0; i < amount; i++) {
        tempObj[i] = Obj[i];
    }
    delete[] Obj;

    return tempObj;
}

void setData(Right_M* Obj, const int amount)
{
    cout << "Введите длину стороны" << endl;
    cin >> Obj[amount].len;
    cout << "Введите количество сторон" << endl;
    cin >> Obj[amount].kolstr;
    cout << "Введите координаты x и y" << endl;
    cin >> Obj[amount].x >> Obj[amount].y;

    // Вычисляем площадь и периметр
    Obj[amount].S = computeArea(Obj[amount]);
    Obj[amount].P = computePerimeter(Obj[amount]);

    cout << endl;
}

void showData(const Right_M* Obj, const int amount, int r)
{
    cout << "№\tДлина\tКоличество сторон\tКоординаты\tПлощадь\tПериметр" << endl;

    for (int i = 0; i < amount-r; i++) {
        cout << i + 1 << "\t" << Obj[i].len << "\t" << Obj[i].kolstr << "\t\t\t"
            << Obj[i].x << " " << Obj[i].y << "\t\t" << Obj[i].S << "\t" << Obj[i].P << endl;
        restoreCoordinates(Obj[i]);
    }
}

void Delete(Right_M* Obj, const int amount, int r){
    int number;
    cout << "Введите номер структуры, которую хотите удалить:" << endl;
    cin >> number;
    for (int i = number-1; i < amount; i++){
        Obj[i] = Obj[i+1];
    }
    Obj--;
    r++;
}

double computeArea(const Right_M& obj)
{
    if (obj.kolstr < 3) return 0.0; // Многоугольник должен иметь хотя бы 3 стороны

    double a = obj.len;
    double S = (obj.kolstr * a * a) / (4 * tan(M_PI / obj.kolstr)); // Формула для правильного многоугольника
    return S;
}

double computePerimeter(const Right_M& obj)
{
    if (obj.kolstr < 3) return 0.0; // Многоугольник должен иметь хотя бы 3 стороны

    double P = obj.kolstr * obj.len;
    return P;
}

void restoreCoordinates(const Right_M& obj)
{
    if (obj.kolstr < 3) return; // Многоугольник должен иметь хотя бы 3 стороны
    int R = 0;
    double a = obj.len;
    R = a / (2*sin(2 * M_PI / obj.kolstr));
    int k;


    double x_center = obj.x;
    double y_center = obj.y;



    for (int i = 0; i < obj.kolstr; i++) {
        double x = x_center + a * cos(2 * M_PI * i / obj.kolstr);
        double y = y_center + a * sin(2 * M_PI * i / obj.kolstr);
        cout << "Вершина " << i + 1 << ": (" << x << ", " << y << ")" << endl;
    }

}

void findMaxArea(const Right_M* Obj, const int amount, int r)
{
    double maxArea = 0.0;
    int maxIndex = -1;

    for (int i = 0; i < amount-r; i++) {
        if (Obj[i].S > maxArea) {
            maxArea = Obj[i].S;
            maxIndex = i;
        }
    }

    if (maxIndex != -1) {
        cout << "Многоугольник с максимальной площадью:" << endl;
        showData(&Obj[maxIndex], 1, r);
        cout << endl;
    }
}

void findMaxPerimeter(const Right_M* Obj, const int amount, int r)
{
    double maxPerimeter = 0.0;
    int maxIndex = -1;

    for (int i = 0; i < amount-r; i++) {
        if (Obj[i].P > maxPerimeter) {
            maxPerimeter = Obj[i].P;
            maxIndex = i;
        }
    }

    if (maxIndex != -1) {
        cout << "Многоугольник с максимальным периметром:" << endl;
        showData(&Obj[maxIndex], 1, r);
        cout << endl;
    }
}