#include <locale.h>
#include <iostream>
#include <cmath>

using namespace std;

struct Right_M 
{
    double len;
    int kolstr;
    double x;
    double y;
    double S;
    double P;
};

Right_M* AddStruct(Right_M* Obj, const int amount);
void setData(Right_M* Obj, const int amount);
void showData(const Right_M* Obj, const int amount, int r);
double computeArea(const Right_M& obj);
double computePerimeter(const Right_M& obj);
void Delete(Right_M* Obj, const int amount, int r);
void restoreCoordinates(const Right_M& obj);
void findMaxArea(const Right_M* Obj, const int amount);
void findMaxPerimetr(const Right_M* Obj, const int amount);
void print_menu();
int get_variant(int count);
void print_menu1();
void print_exit();
int m;

int main()
{
    setlocale(LC_ALL, "Russian");

    Right_M* Geometry = nullptr;
    int M_amount = 0;
    int YeaOrNot = 0;
    int variant;
    int r;
    int j;
    do {
        print_menu(); 

        variant = get_variant(5); 
        
        switch (variant) {
            case 1:
                Geometry = AddStruct(Geometry, M_amount);
                setData(Geometry, M_amount);
                M_amount++;
                break;

            case 2:
                int r;
                showData(Geometry, M_amount, r);
                break;

            case 3:
                r=0;
                j=0;
                while (j=1)
                {
                    cout << "Хотите удалить структуру? нажмите 1(да) " << endl;
                    int g;
                    cin >> g;
                    if (g==1)
                    {
                        Delete(Geometry, M_amount, r);
                        r++;
                    }
                    else if(g==0)
                    {
                        break;
                    }
                }
                break;
            case 4:
                do
                {
                    print_menu1();
                    variant = get_variant(3); 
                    switch (variant)
                    {
                        case 1:
                            findMaxArea(Geometry, M_amount-r);
                            break;
                        case 2:
                            findMaxPerimetr(Geometry, M_amount-r);
                            break;
                    }
                    if (variant != 3)
                        system("pause");
                } while (variant != 3);
                break;
            case 5:
                    while{
                    print_exit();
                    variant = get_variant(2);
                    switch (variant)
                    {
                        case 1:
                            m = 5;
                            break;
                        
                    }
                    break;
                    }while (variant != 2);
        }
        if (variant != 5)
            system("pause");// задерживаем выполнение, чтобы пользователь мог увидеть результат выполнения выбранного пункта
        if (m = 5)
            {
                break;
            }
    } while (variant != 5);
}

Right_M* AddStruct(Right_M* Obj, const int amount)
{
    Right_M* tempObj = new Right_M[amount + 1];

    for (int i = 0; i < amount; i++) {
        tempObj[i] = Obj[i];
    }
    delete[] Obj;

    return tempObj;
}

void setData(Right_M* Obj, const int amount)
{
    cout << "Введите длину стороны" << endl;
    cin >> Obj[amount].len;
    cout << "Введите количество сторон" << endl;
    cin >> Obj[amount].kolstr;
    cout << "Введите координаты x и y" << endl;
    cin >> Obj[amount].x >> Obj[amount].y;

    // Вычисляем площадь и периметр
    Obj[amount].S = computeArea(Obj[amount]);
    Obj[amount].P = computePerimeter(Obj[amount]);

    cout << endl;
}

void showData(const Right_M* Obj, const int amount, int r)
{
    cout << "№\tДлина\tКоличество сторон\tКоординаты\tПлощадь\tПериметр" << endl;

    for (int i = 0; i < amount-r; i++) {
        cout << i + 1 << "\t" << Obj[i].len << "\t" << Obj[i].kolstr << "\t\t\t"
            << Obj[i].x << " " << Obj[i].y << "\t\t" << Obj[i].S << "\t" << Obj[i].P << endl;
        restoreCoordinates(Obj[i]);
    }
}

void Delete(Right_M* Obj, const int amount, int r){
    int number;
    cout << "Введите номер структуры, от которой вы хотите избавиться:" << endl;
    cin >> number;
    for (int i = number-1; i < amount; i++){
        Obj[i] = Obj[i+1];
    }
    Obj--;
    r++;
}

double computeArea(const Right_M& obj)
{
    if (obj.kolstr < 3) return 0.0; // Многоугольник должен иметь хотя бы 3 стороны

    double a = obj.len;
    double S = (obj.kolstr * a * a) / (4 * tan(M_PI / obj.kolstr)); // Формула для правильного многоугольника
    return S;
}

double computePerimeter(const Right_M& obj)
{
    if (obj.kolstr < 3) return 0.0; // Многоугольник должен иметь хотя бы 3 стороны
    double P = obj.kolstr * obj.len;
    return P;
}

void restoreCoordinates(const Right_M& obj)
{
    if (obj.kolstr < 3) return; // Ìíîãîóãîëüíèê äîëæåí èìåòü õîòÿ áû 3 ñòîðîíû
    int R = 0;
    double a = obj.len;
    R = a / (2*sin(2 * M_PI / obj.kolstr));
    int k;


    double x_center = obj.x;
    double y_center = obj.y;



    for (int i = 0; i < obj.kolstr; i++) {
        double x = x_center + a * cos(2 * M_PI * i / obj.kolstr);
        double y = y_center + a * sin(2 * M_PI * i / obj.kolstr);
        cout << "Âåðøèíà " << i + 1 << ": (" << x << ", " << y << ")" << endl;
    }

}

void findMaxArea(const Right_M* Obj, const int amount)
{
    double maxArea = 0.0;

    // Находим максимальную площадь
    for (int i = 0; i < amount; i++) {
        if (Obj[i].S > maxArea) {
            maxArea = Obj[i].S;
        }
    }

    for (int i = 0; i < amount; i++) {
        if (Obj[i].S == maxArea) {
            cout << "Номер многоугольника с максимальной площадью: " << i+1 << endl;
            cout << "Максимальная площадь: " << maxArea << "\n" << endl;
        }
    }
}

void findMaxPerimetr(const Right_M* Obj, const int amount)
{
    double maxPerimetr = 0.0;

    // Находим максимальный периметр
    for (int i = 0; i < amount; i++) {
        if (Obj[i].S > maxPerimetr) {
            maxPerimetr = Obj[i].P;
        }
    }

    for (int i = 0; i < amount; i++) {
        if (Obj[i].P == maxPerimetr) {
            cout << "Номер многоугольника с максимальном периметром: " << i+1 << endl;
            cout << "Максимальный периметр: " << maxPerimetr << "\n" << endl;
        }
    }
}
    
void print_menu() 
{
    system("cls"); // очищает экран
    cout << "Какое действие хотите совершить?" << endl;
    cout << "1. Внести данные о новом многоугольнике" << endl;
    cout << "2. Посмотреть имеющиеся записи о многоугольниках" << endl;
    cout << "3. Удалить запись о каком-либо многоугольнике" << endl;
    cout << "4. Определение максимальных площади или периметра" << endl;
    cout << "5. Выход" << endl;
    cout << ">";
}
int get_variant(int count) 
{
    int variant;
    string s; 
    getline(cin, s); 
    while (sscanf(s.c_str(), "%d", &variant) != 1 || variant < 1 || variant > count) {
        cout << "Некорректный ввод. Попробуйте еще: "; // выводим сообщение об ошибке
        getline(cin, s); // считываем строку повторно
    }

    return variant;
}

void print_menu1() 
{
    system("cls"); 
    cout << "Какое действие хотите совершить?" << endl;
    cout << "1. Определить многоугольник с максимальной площадью" << endl;
    cout << "2. Определить многоугольник с максимальным периметром" << endl;
    cout << "3. Выход на главное меню" << endl;
    cout << ">";
}
void print_exit()
{
    system("cls");
    cout << "Вы уверенны что хотите уйти?" << endl;
    cout << "1. Да, я хочу выйти" << endl;
    cout << "2. Нет" << endl;
    cout << ">";
}
